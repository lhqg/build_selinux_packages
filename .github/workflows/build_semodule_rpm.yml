name: Build and upload SELinux module RPM packages

on: 
  workflow_call:
    inputs:
      build_distro:
        description: 'Distribution family'
        required: true
        type: string
      build_distro_versions:
        description: 'Matrix of distribution versions to build for'
        required: true
        type: string
      source_repo_location:
        description: 'Provides the directory where the source repository is to be checked out'
        required: false
        default: 'SOURCE_REPO'
        type: string
      spec_file_location:
        description: 'Provides the relative path to the source_repository of the SPEC file'
        required: true
        default: ''
        type: string
      release_upload_url:
        description: 'Provides the URL to upload the built RPM to the provided release'
        required: false
        default: ''
        type: string
      provided_version:
        description: 'RPM version if parameter'
        required: false
        type: string
      provided_release:
        description: 'RPM release if parameter'
        required: false
        type: string
      sftp_server:
        description: Name or IP address of SFTP server to upload RPMs to
        required: false
        type: string
      sftp_user:
        description: User for SFTP upload of RPMs
        required: false
        type: string
      sftp_remote_path:
        description: Remote path to upload RPMs to
        required: false
        type: string
    secrets:
      gpg_private_key:
        description: The GPG private key
        required: true
      gpg_private_key_password:
        description: The GPG private key password
        required: true
      sftp_password:
        description: SSH password for SCP/SFTP uploads
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    name: Create SELinux module from sources

    strategy:
      matrix: 
        distro_version: ${{ fromJSON(inputs.build_distro_versions) }}
      
    env:
      gpg_private_key_file: private_key.gpg
      gpg_private_key: ${{ secrets.gpg_private_key }}
      gpg_private_key_password: ${{ secrets.gpg_private_key_password }}
      rpms_dir: rpmbuild/RPMS/

    steps:
      - name: Checkout code
        uses: actions/checkout@master
        with:
          path: ${{ inputs.source_repo_location }}
        
      - name: Prepare build workspace and create private key file from secret.
        shell: bash
        run: |
            echo "${gpg_private_key}" | base64 -di > ${{github.workspace}}/${gpg_private_key_file}
            echo "${gpg_private_key_password}" > ${{github.workspace}}/.${gpg_private_key_file}.passphrase
            ls -l ${{github.workspace}}/${gpg_private_key_file} ${{github.workspace}}/.${gpg_private_key_file}.passphrase
  
      - name: Call Docker RPM build
        id: dockerbuild
        uses: lhqg/action-os-rpmbuild-selinux@main
        with:
          distro: ${{ inputs.build_distro }}
          distro_version: ${{ matrix.distro_version }}
          source_repo_location: ${{ inputs.source_repo_location }}
          spec_file_location: ${{ inputs.spec_file_location }}
          provided_version: ${{ inputs.provided_version }}
          provided_release: ${{ inputs.provided_release }}
          gpg_name: ${{ vars.RPM_SIGNING_KEY_NAME }}
          gpg_private_key_file: ${{ env.gpg_private_key_file }}

      - name: SFTP Upload RPMs
        if: ${{ startsWith(inputs.release_upload_url, 'sftp') }}
        id: sftp_upload_rpms
        uses: Dylan700/sftp-upload-action@latest
        with:
            server: ${{ inputs.sftp_server }}
            username: ${{ inputs.sftp_user }}
            password: ${{ secrets.sftp_password }}
            uploads: |
              rpmbuild/RPMS/ => ${{ inputs.sftp_remote_path }}/${{ matrix.distro_version }}/

      - name: HTTP Upload RPMs
        if: ${{ startsWith(inputs.release_upload_url, 'https://') }}
        id: http_upload_rpms
        run: |

          grep -q '^https://' <<< '${{ inputs.release_upload_url }}'
          rc_grep=$?

          if [ -n "${rpms_dir}" -a -d "${rpms_dir}" -a $rc_grep -eq 0 ]
          then
            UPLOAD_URL=$( sed -e 's/{?name,label}/?name/' <<< '${{ inputs.release_upload_url }}' )
            echo "::notice title={title}::Uploading to ${UPLOAD_URL}"

            ls -lR ${rpms_dir}

            rc=0
            count=0

            for rpm in $( find ${rpms_dir} -type f -name '*.rpm' )
            do 
              RPM_FILE_NAME=$(basename ${rpm})

              # Upload RPM
              echo "::debug title={debug}::Uploading ${RPM_FILE_NAME}:"
              curl \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                -T ${rpm} \
                ${UPLOAD_URL}=${RPM_FILE_NAME}
              rc_curl=$?
              echo "::debug title={debug}::Upload return code: ${rc_curl}"
              [ $rc_curl -eq 0 ] && count=$(( $count + 1 )) || rc=1
            done
            echo "::notice title={title}::Total RPMs uploaded: ${count}."
            [ $count -lt 1 ] && rc=1
          else
            echo "::error title={title}:: Fatal: the signed RPMs directory is not set or does not exist."
            rc=1
          fi
          exit $rc
